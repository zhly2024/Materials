---
title: "ggpval"
author: "zhly"
date: "2023-12-17"
categories: [r, code, visualization]
format: html
editor: visual
---

```{r setup, include=FALSE}
library(ggpval)
library(tidyverse)
library(data.table)
library(DT)
```

Add statistical test or annotation to ggplot2 plots

```{r}
A <- rnorm(200, 0, 3)
B <- rnorm(200, 2, 4)
G <- rep(c("G1", "G2"), each = 100)
dt <- data.table(A, B, G)
dt <- melt(dt, id.vars = "G")
theme_set(theme_classic())
datatable(dt)
```

## A trivial boxplot example

```{r}
plt <- ggplot(dt, aes(variable, value)) +
  geom_boxplot() +
  geom_jitter()

add_pval(plt, pairs = list(c(1, 2)), test='wilcox.test', alternative='two.sided')
```

## Convert with plotly with `ggplotly`

```{r}
plt <- ggplot(dt, aes(variable, value)) +
  geom_boxplot() +
  geom_jitter()
plt <- add_pval(plt, pairs = list(c(1, 2)), test = "wilcox.test", plotly=TRUE)
plotly::ggplotly(plt) 
```

```{r}
plt <- ggplot(dt, aes(variable, value)) +
  geom_boxplot() +
  geom_jitter()
plt <- add_pval(plt, pairs = list(c(1, 2)), test = "t.test", plotly=TRUE)
plotly::ggplotly(plt) 
```

## Boxplot with facets

```{r}
plt <- ggplot(dt, aes(variable, value)) +
  geom_boxplot() +
  geom_jitter() +
  facet_wrap(~G)
add_pval(plt, pairs = list(c(1, 2)), test = "wilcox.test",)
```

```{r}
plt <- ggplot(dt, aes(variable, value)) +
  geom_boxplot() +
  geom_jitter() +
  facet_wrap(~G)
plt <- add_pval(plt, pairs = list(c(1, 2)),test = "wilcox.test", plotly = TRUE)
plotly::ggplotly(plt) 
```

## Bar plot

```{r}
dt[, mu := mean(value),
   by = c("G", "variable")]

dt[, se := sd(value) / .N,
   by = c("G", "variable")]

plt_bar <- ggplot(dt, aes(x=variable, y=mu, fill = variable)) +
  geom_bar(stat = "identity", position = 'dodge') +
  geom_errorbar(aes(ymin=mu-se, ymax=mu+se),
                width = .2) +
  facet_wrap(~G)

add_pval(plt_bar, pairs = list(c(1, 2)), response = 'value')
```

```{r}
add_pval(plt_bar, pairs = list(c(1, 2)), 
         test = 't.test',
          alternative = "less",
         response = 'value',
         pval_star = T)
```

## Annotate your plot with text

```{r}
add_pval(plt, pairs = list(c(1, 2)), annotation = "Awesome")
```

```{r}
add_pval(plt, pairs = list(c(1, 2)), annotation = list("Awesome1", "Awesome2"))
```

```{r}
sessionInfo()
```

[learn more](https://github.com/s6juncheng/ggpval)
