---
title: "formattable"
author: "zhly"
date: "2023-12-14"
categories: [r, code, table, visualization]
format: html
editor: visual
---

```{r echo=FALSE}
# install.packages("devtools")
# devtools::install_github("renkun-ken/formattable")
library(formattable)
```

# 基本格式化

```{r}
p <- percent(c(0.1, 0.02, 0.03, 0.12))
p
```

```{r}
p + 0.05
```

```{r}
max(p)
```

```{r}
mean(p)
```

```{r}
p[1:3]
```

```{r}
p[[2]]
```

```{r}
p[[3]] <- 0.05
p
```

```{r}
balance <- accounting(c(1000, 500, 200, -150, 0, 1200))
balance
```

```{r}
#?accounting
balance1 <- accounting(c(1000, 500, 200, -150, 0, 1200),digits = 3L, format = "d")
balance1
```

```{r}
balance + 1000
```

```{r}
dates <- formattable(as.Date(c("2016-05-01", "2016-05-10")), format = "%Y%m%d")
dates
```

```{r}
dates + 30
```

```{r}
lv <- formattable(c(TRUE, FALSE, FALSE, TRUE), "yes", "no")
lv
```

```{r}
!lv
```

```{r}
isTRUE(lv[[1]])
```

```{r}
all(lv)
```

```{r}
any(lv)
```

```{r}
pm <- matrix(rnorm(6, 0.8, 0.1), 2, 3, 
  dimnames = list(c("a", "b"), c("X", "Y", "Z")))
pm
```

```{r}
fpm <- percent(pm)
fpm
```

```{r}
fpm["a", c("Y", "Z")]
```

```{r}
pa <- array(rnorm(12, 0.8, 0.1), c(2, 3, 2))
pa
```

```{r}
percent(pa)
```

# 数据框中进行格式化

```{r}
scores <- data.frame(id = 1:5,
  prev_score = c(10, 8, 6, 8, 8),
  cur_score = c(8, 9, 7, 8, 9),
  change = c(-2, 1, 1, 0, 1))
scores
```

```{r}
formattable(scores)
```

```{r}
plain_formatter <- formatter("span")
plain_formatter(c(1, 2, 3))
```

```{r}
width_formatter <- formatter("span",
  style = x ~ style(width = suffix(x, "px")))
width_formatter(c(10, 11, 12))
```

```{r}
sign_formatter <- formatter("span", 
  style = x ~ style(color = ifelse(x > 0, "green", 
    ifelse(x < 0, "red", "black"))))
sign_formatter(c(-1, 0, 1))
```

```{r}
above_avg_bold <- formatter("span", 
  style = x ~ style("font-weight" = ifelse(x > mean(x), "bold", NA)))
formattable(scores, list(
  prev_score = above_avg_bold,
  cur_score = above_avg_bold,
  change = sign_formatter))
```

```{r}
formattable(scores, list(
  cur_score = formatter("span", 
    style = ~ style(color = ifelse(change >= 0, "green", "red")))))
```

```{r}
#hiding columns
formattable(scores, list(prev_score = FALSE))
```

```{r}
#using built-in formatters
products <- data.frame(id = 1:5, 
  price = c(10, 15, 12, 8, 9),
  rating = c(5, 4, 4, 3, 4),
  market_share = percent(c(0.1, 0.12, 0.05, 0.03, 0.14)),
  revenue = accounting(c(55000, 36400, 12000, -25000, 98100)),
  profit = accounting(c(25300, 11500, -8200, -46000, 65000)))
products
```

```{r}
#Without any formatter functions, rendered as an html table
formattable(products)
```

```{r}
formattable(products, list(profit = sign_formatter))
```

```{r}
formattable(products, list(
  price = color_tile("transparent", "lightpink"),
  rating = color_bar("lightgreen"),
  market_share = color_bar("lightblue"),
  revenue = sign_formatter,
  profit = sign_formatter))
```

```{r}
set.seed(123)
df <- data.frame(id = 1:10, 
  a = rnorm(10), b = rnorm(10), c = rnorm(10))
formattable(df, list(area(col = a:c) ~ color_tile("transparent", "pink")))
```

```{r}
formattable(df[, -1], list(~ percent))
```

```{r}
df <- cbind(data.frame(id = 1:10), 
  do.call(cbind, lapply(1:8, function(x) rnorm(10))))
formattable(df, lapply(1:nrow(df), function(row) {
  area(row, col = -1) ~ color_tile("lightpink", "lightblue")
}))
```

```{r}
#DT::datatables
as.datatable(formattable(products))
```

```{r}
#转化后保留格式
as.datatable(formattable(products, list(
  price = color_tile("transparent", "lightpink"),
  revenue = sign_formatter,
  profit = sign_formatter)))
```

```{r}
p <- data.frame(
  id = c(1, 2, 3, 4, 5),
  name = c("A1", "A2", "B1", "B2", "C1"),
  balance = accounting(c(52500, 36150, 25000, 18300, 7600), format = "d"),
  growth = percent(c(0.3, 0.3, 0.1, 0.15, 0.15), format = "d"),
  ready = formattable(c(TRUE, TRUE, FALSE, FALSE, TRUE), "yes", "no"))
p
```

```{r}
p[1:3, c("name", "balance", "growth")]
```

```{r}
df <- data.frame(
  id = 1:10,
  name = c("Bob", "Ashley", "James", "David", "Jenny",
    "Hans", "Leo", "John", "Emily", "Lee"),
  age = c(28, 27, 30, 28, 29, 29, 27, 27, 31, 30),
  grade = c("C", "A", "A", "C", "B", "B", "B", "A", "C", "C"),
  test1_score = c(8.9, 9.5, 9.6, 8.9, 9.1, 9.3, 9.3, 9.9, 8.5, 8.6),
  test2_score = c(9.1, 9.1, 9.2, 9.1, 8.9, 8.5, 9.2, 9.3, 9.1, 8.8),
  final_score = c(9, 9.3, 9.4, 9, 9, 8.9, 9.25, 9.6, 8.8, 8.7),
  registered = c(TRUE, FALSE, TRUE, FALSE, TRUE, TRUE, TRUE, FALSE, FALSE, FALSE),
  stringsAsFactors = FALSE)
df
```

```{r}
formattable(df, list(
  age = color_tile("white", "orange"),
  grade = formatter("span", style = x ~ ifelse(x == "A",
    style(color = "green", font.weight = "bold"), NA)),
  area(col = c(test1_score, test2_score)) ~ normalize_bar("pink", 0.2),
  final_score = formatter("span",
    style = x ~ style(color = ifelse(rank(-x) <= 3, "green", "gray")),
    x ~ sprintf("%.2f (rank: %02d)", x, rank(-x))),
  registered = formatter("span",
    style = x ~ style(color = ifelse(x, "green", "red")),
    x ~ icontext(ifelse(x, "ok", "remove"), ifelse(x, "Yes", "No")))
))
```

```{r}
#mtcars
#color_bar
formattable(mtcars, list(mpg = color_bar("lightgray", proportion)))
```

```{r}
#color_text
formattable(mtcars, list(mpg = color_text("black", "red")))
```

```{r}
#color_title
formattable(mtcars, list(mpg = color_tile("white", "pink")))
```

# 心得

-   格式化函数在向量中的操作

-   将格式化函数在数据框中的应用

# 参考

<https://renkun-ken.github.io/formattable/reference/index.html>
